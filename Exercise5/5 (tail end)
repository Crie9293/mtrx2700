.syntax unified
.thumb


// Clock registers
.equ RCC, 0x40021000	  // Base clock register. Reset, Clock Control
.equ AHBENR, 0x14       // Enable GPIO clocks
.equ APB1ENR, 0x1C      // Enable peripherals on bus 1
.equ APB2ENR, 0x18      // Enable Timers

// Base addresses for GPIO ports
.equ GPIOE, 0x48001000

// Offsets for GPIO ports
.equ MODER, 0x00
.equ ODR, 0x14

// Bits for enabling GPIO ports
.equ GPIOA_ENABLE, 17
.equ GPIOC_ENABLE, 19
.equ GPIOE_ENABLE, 21

// Enable the clocks for timer 2
.equ TIM2EN, 0

.equ GPIOx_AFRH, 0x24 @ offset for setting the alternate pin function

// Timer registers
.equ TIM2, 0x40000000	   // Base address for Timer 2
.equ TIM_CR1, 0x00	     // Enable counter and choose whether to count up or down
.equ TIM_CCMR1, 0x18     // Compare capture settings register
.equ TIM_CNT, 0x24       // Counter
.equ TIM_ARR, 0x2C       // Value for counter to count up to or to count down from
.equ TIM_PSC, 0x28       // Prescaler
.equ TIM_CCER, 0x20      // Enable output compare
.equ TIM_CCR1, 0x34      // Value for TCNT to be compared to in output compare
.equ TIM_SR, 0x10        // Status register
.equ TIM_DIER, 0x0C      // Enable interrupts

.data
ascii_string: .asciz "aap" 		@ Define ascii string

.text


.global main



main:
	BL enableGPIOClocks
	BL enableLEDs

	LDR R7, =GPIOA			@ Set R7 to GPIOA (where the user button bit is stored)
	LDR R6, =GPIOE			@ Set R6 to GPIOE (where the bits of LEDs are stored)

	LDR R0, =ascii_string 		@ Loads the string into R0
	BL count_letter

count_letter:
    MOV R1, R0           		@ R1 = Pointer to input string
    MOV R2, #0b0            		@ R2 = Vowel count (initialize to 0)
    MOV R3, #0b0			@ R3 = Consonant count (initialize to 0)

letter_loop:
    LDRB R4, [R1], #1     		@ Load byte (character) and advance pointer
    CMP R4, #0            		@ Check if end of string (null terminator)
    BEQ done              		@ If yes, exit loop

    @ Check for vowels (a, e, i, o, u, A, E, I, O, U)
    CMP R4, #'a'
    BEQ inc_count_vowel			@ If current letter is a vowel, branch to another function
    CMP R4, #'e'
    BEQ inc_count_vowel
    CMP R4, #'i'
    BEQ inc_count_vowel
    CMP R4, #'o'
    BEQ inc_count_vowel
    CMP R4, #'u'
    BEQ inc_count_vowel
    CMP R4, #'A'
    BEQ inc_count_vowel
    CMP R4, #'E'
    BEQ inc_count_vowel
    CMP R4, #'I'
    BEQ inc_count_vowel
    CMP R4, #'O'
    BEQ inc_count_vowel
    CMP R4, #'U'
    BEQ inc_count_vowel

    @ Check for consonants (anything other than vowels)
    CMP  R4, #'A'
    BLT inc_count_consonant
    CMP  R4, #'Z'
    BLE inc_count_consonant
    CMP  R4, #'a'
    BLT inc_count_consonant
    CMP  R4, #'z'
    BLE inc_count_consonant
    B letter_loop               	@ Continue loop if not a vowel

inc_count_vowel:
    ADD R2, R2, #1        		@ Increment vowel count
    B letter_loop              		@ Continue loop

inc_count_consonant:
    ADD R3, R3, #1        		@ Increment consonant count
    B letter_loop               	@ Continue loop

done:
    MOV R5, R2      			@ Return vowel count in R1
    MOV R9, #0				@ Set mode to vowel or consonant LED count



main2:

	MOV R9, #1000   @ 1ms delay

    LDR R0, =RCC	@ load the base adress for the timer
    LDR R2, [R0, #APB1ENR]    @ load peripheral control clock register
	  ORR R2, 1 << TIM2EN      @ enable tim2 flag
    STR R2, [R0, #APB1ENR]

	LDR R0, =TIM2
    MOV R2, #7999  @ set prescaler
    STR R2, [R0, #TIM_PSC]

    LDR R0, =TIM2
    STR R1, [R0, #TIM_ARR]	@ store auto-reload value

    MOV R2, #0
    STR R2, [R0, #TIM_CNT]	@ reset and clear the counter

    MOV R2, #(1 << 7)
    STR R2, [R0, #TIM_CR1]	@ Enable ARPE bit

    MOV R2, #1
    STR R2, [R0, #TIM_CR1]	@start the timer



delay:

	LDR R6, =GPIOE
	STRB R2, [R6, #ODR + 1]
    LDR R2, [R0, #TIM_CNT]
    CMP R2, R9	 @ check if reached delay time
    BLT delay	 @ if CNT < delay, loop

    //MOV R2, #0                   @ stop timer
    //STR R2, [R0, #TIM_CR1]       @ disable TIM2

Turnon:

	LDR R6, =GPIOE
	STRB R3, [R6, #ODR + 1]
	LDR R2, [R0, #TIM_CNT]
    CMP R2, R1	 @ check if reached delay time
    BLT Turnon
	B delay


end:
	B end

enableGPIOClocks:
	LDR R0, =RCC
	LDR R1, [R0, #AHBENR]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE
	STR R1, [R0, #AHBENR]
	BX LR

enableLEDs:
	LDR R0, =GPIOE
	LDR R1, =0x5555
	STRH R1, [R0, #MODER + 2]
	BX LR

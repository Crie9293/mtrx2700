@Exercise 5
.syntax unified
.thumb

.data
buffer: .space 129

.equ TIM2EN, 0

.equ GPIOx_AFRH, 0x24 @ offset for setting the alternate pin function

// Timer registers
.equ TIM2, 0x40000000	   // Base address for Timer 2
.equ TIM_CR1, 0x00	     // Enable counter and choose whether to count up or down
.equ TIM_CCMR1, 0x18     // Compare capture settings register
.equ TIM_CNT, 0x24       // Counter
.equ TIM_ARR, 0x2C       // Value for counter to count up to or to count down from
.equ TIM_PSC, 0x28       // Prescaler
.equ TIM_CCER, 0x20      // Enable output compare
.equ TIM_CCR1, 0x34      // Value for TCNT to be compared to in output compare
.equ TIM_SR, 0x10        // Status register
.equ TIM_DIER, 0x0C      // Enable interrupts


.global main

.text
main:
	BL initialise_power
    BL enable_peripheral_clocks
    BL enable_uart

    LDR R1, =buffer
    MOV R8, #0x00

receive_char:
    LDR R0, =UART
    LDR R4, [R0, USART_ISR]

    @ Error check
    TST R4, 1 << UART_ORE | 1 << UART_FE
    BNE clear_error

    @ Wait for data
    TST R4, 1 << UART_RXNE
    BEQ receive_char

    @ Read character
    LDRB R4, [R0, USART_RDR]

    @ Check for null terminating character
    CMP R4, #0
    BEQ palindrome_set

    @ Store character and increment counter
    STRB R4, [R1, R8]
    ADD R8, #1

    B receive_char            @ Continue receiving

palindrome_set:
	MOV R2, R1			@ Pointer
	find_end:
		LDRB R3, [R2], #1	@Load byte and move pointer forward
    	CMP R3, #0			@check for \0
    	BNE find_end		@loop until end of the string

    	SUB R2, R2, #2		@iterate backwards
    	MOV R4, R1			@pointer to the start of the string
    	MOVS R0, #1			@set as palindrome (assume)

check_palindrome:
    CMP R4, R2			@compare R4 and R2
    BCS done

    LDRB R5, [R4]		@ Load char from start
    LDRB R6, [R2]		@ Load char from end
    CMP R5, R6			@check if start and back of word is same
    BNE not_palindrome	@If different, not a palidrome

    ADD R4, R4, #1		@move start forward
    SUB R2, R2, #1		@move end backward
    B check_palindrome	@repeat check

not_palindrome:
    MOV R0, #0			@set as not palindrome
    MOV R9, #0 			@ to set the mode (indicates still in first UART)

done:
	MOV R2, #1
	CMP R0, R2			@ check if the string is a palindrome
	BNE transmit_loop  	@ if not, transmit the string to other UART
	MOV R2, #-1			@ value of the caesar cypher
	B caesar_cypher

caeser_cypher:
    LDRB R3,[R1]
    CMP R3,#0	@check for \0
    BEQ finish_caesar
    CMP R3, #'Z'
    BLE uppercase	@check if uppercase or lowercase

lowercase:
	ADD R3, R3, R2	@add cypher value
	CMP R3, #'z'
	BGT BranchFwd	@branch back to 'a' if past 'z'
	CMP R3, #'a'
	BLT BranchBkwd	@branch back to 'z' if past 'a'
	B Iterate

uppercase:
	ADD R3, R3, R2	@add cypher value
	CMP R3, #'Z'
	BGT BranchFwd	@branch back to 'A' if past 'Z'
	CMP R3, #'A'
	BLT BranchBkwd	@branch back to 'Z' if past 'A'
	B Iterate

Iterate:
	STRB R3, [R1]	@store string
    ADD R1, R1, #1	@iterate string
    B caeser_cypher

BranchFwd:
	SUB R3, R3, #26	@go to start of alphabet
	B Iterate

BranchBkwd:
	ADD R3, R3, #26	@go to end of alphabet
	B Iterate

finish_caesar:
	CMP R9, #1
	BEQ vowel_cons_LED
	B transmit_loop

transmit_loop:
	LDRB R5, [R1], #1		@ Post increment by 1
	CMP R5, #0				@ Check if it's end of string
	BEQ end_loop
	B uart_loop

end_loop:
	B decipher_message

uart_loop:
	LDR R0, =UART4

	poll_uart:
		LDR R3, [R0, USART_ISR]

		ANDS R3, #1 << UART_TXE
		BEQ uart_loop

		STRB R5, [R0, USART_TDR]
		BL delay_loop
		B transmit_loop

delay_loop:
	LDR R9, =0xfffff
delay_inner:
	SUBS R9, #1
	BGT delay_inner
	BX LR

decipher_message:
	MOV R9, #1			@ to set the mode to continute to LED (indicates in second UART)
	MOV R2, #1			@ to revert the caesar cypher
	B vowel_cons_LED

vowel_cons_LED:
	BL initialise_discovery_board	@ Enabling the discovery board user button
	LDR R7, =GPIOA			@ Set R7 to GPIOA (where the user button bit is stored)
	LDR R6, =GPIOE			@ Set R6 to GPIOE (where the bits of LEDs are stored)

	count_letter:
    MOV R1, R0           		@ R1 = Pointer to input string
    MOV R2, #0b0            		@ R2 = Vowel count (initialize to 0)
    MOV R3, #0b0			@ R3 = Consonant count (initialize to 0)

letter_loop:
    LDRB R4, [R1], #1     		@ Load byte (character) and advance pointer
    CMP R4, #0            		@ Check if end of string (null terminator)
    BEQ done              		@ If yes, exit loop

    @ Check for vowels (a, e, i, o, u, A, E, I, O, U)
    CMP R4, #'a'
    BEQ inc_count_vowel			@ If current letter is a vowel, branch to another function
    CMP R4, #'e'
    BEQ inc_count_vowel
    CMP R4, #'i'
    BEQ inc_count_vowel
    CMP R4, #'o'
    BEQ inc_count_vowel
    CMP R4, #'u'
    BEQ inc_count_vowel
    CMP R4, #'A'
    BEQ inc_count_vowel
    CMP R4, #'E'
    BEQ inc_count_vowel
    CMP R4, #'I'
    BEQ inc_count_vowel
    CMP R4, #'O'
    BEQ inc_count_vowel
    CMP R4, #'U'
    BEQ inc_count_vowel

    @ Check for consonants (anything other than vowels)
    CMP  R4, #'A'
    BLT inc_count_consonant
    CMP  R4, #'Z'
    BLE inc_count_consonant
    CMP  R4, #'a'
    BLT inc_count_consonant
    CMP  R4, #'z'
    BLE inc_count_consonant
    B letter_loop               	@ Continue loop if not a vowel

inc_count_vowel:
    ADD R2, R2, #1        		@ Increment vowel count
    B letter_loop              		@ Continue loop

inc_count_consonant:
    ADD R3, R3, #1        		@ Increment consonant count
    B letter_loop               	@ Continue loop

done:
    MOV R5, R2      			@ Return vowel count in R1
    MOV R9, #0				@ Set mode to vowel or consonant LED count
    B display_loop

display_loop:
	MOV R9, #500000   @ 1ms delay

    LDR R0, =RCC	@ load the base adress for the timer
    LDR R2, [R0, #APB1ENR]    @ load peripheral control clock register
	  ORR R2, 1 << TIM2EN      @ enable tim2 flag
    STR R2, [R0, #APB1ENR]

	LDR R0, =TIM2
    MOV R2, #7999  @ set prescaler
    STR R2, [R0, #TIM_PSC]

    LDR R0, =TIM2
    STR R1, [R0, #TIM_ARR]	@ store auto-reload value

    MOV R2, #0
    STR R2, [R0, #TIM_CNT]	@ reset and clear the counter

    MOV R2, #(1 << 7)
    STR R2, [R0, #TIM_CR1]	@ Enable ARPE bit

    MOV R2, #1
    STR R2, [R0, #TIM_CR1]	@start the timer

vowel_LED:
	LDR R6, =GPIOE
	STRB R5, [R6, #ODR + 1]
    LDR R2, [R0, #TIM_CNT]
    CMP R2, R9	 @ check if reached delay time
    BLT vowel_LED	 @ if CNT < delay, loop

    //MOV R2, #0                   @ stop timer
    //STR R2, [R0, #TIM_CR1]       @ disable TIM2

consonant_LED:
	LDR R6, =GPIOE
	STRB R3, [R6, #ODR + 1]
	LDR R2, [R0, #TIM_CNT]
    CMP R2, R1	 @ check if reached delay time
    BLT consonant_LED
	B vowel_LED

.syntax unified
.thumb

#include "initialise.s"

.data
message: .asciz "Mech2700!"  @ Null-terminated string
message_length: .byte 10
terminating_char: .byte '$'


.text
.global partA
partA:
    @ Initialize peripherals and UART
    BL initialise_power
    BL enable_peripheral_clocks
    BL enable_uart
    B main_flow

main_flow:
	BL check_button
	BL load_message
	B main_flow

check_button:
    LDR R0, =GPIOA
poll_press:
    LDR R3, [R0, #GPIO_IDR]   @ Read button state
    TST R3, #1                @ Check if PA0 is pressed
    BEQ poll_press            @ Keep polling if not pressed

poll_release:
    LDR R3, [R0, #GPIO_IDR]   @ Read button state again
    TST R3, #1                @ Check if PA0 is still pressed
    BNE poll_release          @ Wait until button is released

    BX LR


load_message:
	LDR R1, =message           @ Load address of message
	LDR R4, =message_length		@ Load length of message
	LDR R4, [R4]

	transmit_loop:
		LDRB R5, [R1], #1		@ Post increment by 1
		CMP R5, #0				@ Check if it's end of string
		BEQ end_loop
		BL uart_loop
		SUBS R4, #1
		BGT transmit_loop

end_loop:
	LDR R0, =terminating_char
	LDRB R5, [R0]
	poll_end:
		LDR R0, =UART
		LDR R3, [R0, USART_ISR]
		ANDS R3, #1 << UART_TXE
		BEQ poll_end

		STRB R5, [R0, USART_TDR]
B main_flow

uart_loop:
	LDR R0, =UART

	poll_uart:
		LDR R3, [R0, USART_ISR]

		ANDS R3, #1 << UART_TXE
		BEQ uart_loop

		STRB R5, [R0, USART_TDR]
		BL delay_loop
		B transmit_loop

delay_loop:
	LDR R9, =0xfffff
delay_inner:
	SUBS R9, #1
	BGT delay_inner
	BX LR

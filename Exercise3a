// Include the definition and initialization files
#include "initialise.s"

.syntax unified
.thumb
.global partA

// Terminating character
.equ TERM_CHAR, '$'     // User-defined terminating character

.data
.align
txString:
    .asciz "Khit\r\n"    // The r is a carriage return. The n is a new line
txLength:
    .byte 6

.text
// Entry point
partA:
    BL enableGPIOClocks
    BL enableUART
    B buttonMonitor      // Instead of directly transmitting, monitor button

// New function: Monitor button press
buttonMonitor:
    LDR R0, =GPIOA            // Load GPIO Port A address (for button)
    LDR R1, [R0, #GPIO_IDR]   // Read input data register
    TST R1, #0
    BEQ buttonMonitor         // If not pressed, keep checking

    // Button is pressed, load string address into R1 and call transmitString
    LDR R1, =txString
    BL transmitString

    // Small delay to debounce button
    LDR R9, =0x50000
debounce:
    SUBS R9, #1
    BGT debounce

    B buttonMonitor          // Go back to monitoring button

// New function: Transmit any string passed in R1
transmitString:
    PUSH {R4-R7, LR}         // Save registers we'll use
    MOV R6, R1               // Copy string address to R6
    MOV R7, #0               // Initialize character counter

    // First pass to count characters until null terminator
countLoop:
    LDRB R4, [R6, R7]        // Load character at position R7
    CMP R4, #0               // Check if it's null terminator
    BEQ prepTransmit         // If yes, prepare for transmission
    ADD R7, #1               // Increment counter
    B countLoop              // Continue counting

prepTransmit:
    LDR R0, =UART1           // Load UART1 base address
    MOV R4, R7               // Copy character count to R4
    MOV R3, R1               // Copy string address to R3

transmitLoop:
    LDR R5, [R0, #UART_ISR]  // Load the status register into R5
    TST R5, #(1 << UART_TXE) // Check if TXE bit is set
    BEQ transmitLoop         // Wait (loop) until it is set

    CMP R4, #0               // Check if we've sent all characters
    BEQ sendTerminator       // If yes, send terminating character

    LDRB R5, [R3], #1        // Load the next character in the string and point to the next entry
    STRB R5, [R0, #UART_TDR] // Transmit the character
    SUBS R4, #1              // Decrement character count
    B transmitLoop           // Continue transmitting

sendTerminator:
    LDR R5, [R0, #UART_ISR]  // Check status register again
    TST R5, #(1 << UART_TXE) // Check if TXE bit is set
    BEQ sendTerminator       // Wait until ready

    MOV R5, #TERM_CHAR       // Load terminating character
    STRB R5, [R0, #UART_TDR] // Transmit terminating character

    POP {R4-R7, PC}          // Restore registers and return
